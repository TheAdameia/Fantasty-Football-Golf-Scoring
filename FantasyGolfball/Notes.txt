8/31: Project created. User secrets initialized. PSQL server not yet created (need all my classes to do that).
9/16: I think I'm coming up on the end of ironing out the models. Well, the non-DTO models, that is. Unfortunately I think the icky part (making everything in the DbContext) is next, because it would be a fool's errand to work on controllers or managers when you don't have anything to test them with. The good news is, once I create the database, the world is really my oyster and I can develop this in more or less whatever order I want. Just realized I don't have (actual nfl) teams or bye weeks in my data structure. Don't have any bright ideas on how to handle team changes either. I think I will leave those bugbears for later; I doubt solving those will result in drastic changes to what I already have. More important to figure out how to get all that data so I can get a chatbot to format it for me.
9/17: after research, I was able to find data but it would be a pain to get all the scores. Easier to have the chatbot fabricate some basic stuff for me.
9/20: These are probably... extremely inelegant ways to solve the data testing problems. I don't think a DbContext is ever meant to be 7,000 lines. But, you know, I don't give a fuck right now: it needs to be done. The era of me typing "dotnet build" followed by realizing I forgot to do XYZ things and then having to go do them has begun.
The database is created and the endpoint building/frontend shenanigans can begin.
9/21: After resolving some interesting problems I created by having my top level directory not be the C# directory and making a few endpoints, I am coming to realize that it would be prudent to make sure user registration works before I begin creating rosters. And also probably have a roster creation page. This requires planning of the route structure to be competently executed; but perhaps I can use swagger to create some users first. Or, since the login and registration pages are pre-supplied, I could just use those and worry about actually imposing proper limitations on things like rosters later, since I certainly don't need them right now.
Passing rosters from the front end is going to be nearly identical to passing items in the warehouse. All about complex objects. Frankly, it would be less of a pain to build the roster page first than to copy and paste 15 players into swagger over and over.
9/24: I'm still working on making a few more controllers while I'm on this branch, but what I want to do is take a serious look at an example website and seriously trim and consolidate the number of pages for my sketchboard. Once I do that, I feel a little more comfortable about building the roster page.
I think it will ultimately be wiser to work on frontend and backend in parallel here. There are too many endpoints I think I might need that require frontend context for certainty of purpose.
10/1: PlayerStatus is getting nuked. Now that I'm actually writing practical stuff it seems wildly unnecessary. I will need to update my DbContext and my ERD.
admina@strator.comx